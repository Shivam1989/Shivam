/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorRole;

import Business.Drug.Drug;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import static Business.Enterprise.Enterprise.EnterpriseType.Pharmacy;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderCatalog;
import Business.Order.OrderItem;
import Business.Organization.DoctorOrganization;
import Business.Organization.DonorOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Organization.PharmacyAdminOrganization;
import Business.Patient.Patient;
import Business.Supplier.Supplier;
import Business.Supplier.SupplierDirectory;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shivam
 */
public class BrowseCatalog extends javax.swing.JPanel {
private JPanel userProcessContainer;
private Enterprise enterprise;
private DoctorOrganization doctorOrganization;
private EcoSystem system;
private PharmacyAdminOrganization org;
private PatientOrganization org1;
//private SupplierDirectory  supplierDirectory;
private OrderCatalog orderCatalog;
private Order order;
private Patient patient;

    /**
     * Creates new form BrowseCatalog
     */
    public BrowseCatalog(JPanel userProcessContainer,Enterprise enterprise,DoctorOrganization doctorOrganization,EcoSystem system) {
        initComponents();
        this.userProcessContainer= userProcessContainer;
        this.enterprise=enterprise;
        this.doctorOrganization=doctorOrganization;
        this.system=system;
//        this.supplierDirectory=supplierDirectory;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                   if(organization instanceof PatientOrganization) {
                       org1=(PatientOrganization) organization;
                       break;
                   }
                 }
        for (WorkRequest request : org1.getWorkQueue().getWorkRequestList()){
         patient=(Patient) ((LabTestWorkRequest) request).getPatient();
        this.orderCatalog= patient.getOrderCatalog();
        order = new Order();
        populateSupplier();
    }}
public void populateSupplier()
    {for (Network network : system.getNetworkList()) {
                //Step 2-a: Check against each enterprise
           for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
               
              if(enterprise.getEnterpriseType().equals(Pharmacy)){
                  
                 for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                   if(organization instanceof PharmacyAdminOrganization) {
                       org=(PharmacyAdminOrganization) organization;
                       break;
                   }
                 }
              }
           }
    }
        suppComboBox1.removeAllItems();
    for(Supplier supp: org.getSuppDirectory().getSupplierlist()){
    suppComboBox1.addItem(supp);
    }
    populateProductTable();
    
    }
public void populateProductTable()
    {
        DefaultTableModel model = (DefaultTableModel)productTable.getModel();
        model.setRowCount(0);
        Supplier supplier=(Supplier) suppComboBox1.getSelectedItem();
        if (supplier != null){
        for(Drug drug : supplier.getDrugDir().getDrugDir())
        {
            Object[] row = new Object[5];
            row[0]=drug;
            row[1]=drug.getId();
            row[2]=drug.getQuantity();
            row[3]=drug.getMarketPrice();
            //row[4]=drug.getMarketPrice()*1.5;
            row[4]=drug.getMarketPrice()*3;
            
            model.addRow(row);
        }
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        suppComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addtoCartButton6 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnCheckOut = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        suppComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Supplier");

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Avail", "Market Price", "Sale Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Supplier Product Catalog");

        jLabel6.setText("Sales Price");

        txtSalesPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalesPriceActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        jLabel7.setText("Item in cart");

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(addtoCartButton6)))))
                .addGap(6, 6, 6))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(suppComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCheckOut))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(suppComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addtoCartButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckOut)
                    .addComponent(btnBack))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 511, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void suppComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppComboBox1ActionPerformed
        // TODO add your handling code here:
        populateProductTable();
    }//GEN-LAST:event_suppComboBox1ActionPerformed

    private void txtSalesPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalesPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalesPriceActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed

        int row =productTable.getSelectedRow();

        if(row<0)
        {
            JOptionPane.showMessageDialog(this, "Please select a row","Information ",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Drug  selectedProduct = (Drug)productTable.getValueAt(row, 0);
        int salesPrice =0;
        try{
            salesPrice = Integer.parseInt(txtSalesPrice.getText());
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this,"Please enter integer value","Warning ",JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        //Validate sale price is greater than product price
        if (salesPrice < selectedProduct.getMarketPrice())
        {
            JOptionPane.showMessageDialog(this,"Sale Price should be greater than Market Price","Warning ",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
//        if (salesPrice > selectedProduct.getMarketPrice()*3)
//        {
//            JOptionPane.showMessageDialog(this,"Sale Price should be Less than Maximum Selling Price","Warning ",JOptionPane.INFORMATION_MESSAGE);
//            return;
//        }

        int  FetechedQuantity = (Integer)quantitySpinner.getValue();

        if(FetechedQuantity <= 0)
        {
            JOptionPane.showMessageDialog(this,"Quantity should be greater than zero","Warning ",JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if(FetechedQuantity > selectedProduct.getQuantity() ){
            JOptionPane.showMessageDialog(this,"Quantity should be less  than Avaliable quantity","Warning ",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
//        if(salesPrice < selectedProduct.getMarketPrice()*1.5)
//        {
//            belowTarget=belowTarget+FetechedQuantity;
//        }
//        if(salesPrice > selectedProduct.getMarketPrice()*1.5)
//        {
//            aboveTarget=aboveTarget+FetechedQuantity;
//        }
//
      boolean alreadyPresent = false;
//        Commission=(float) (Commission + (FetechedQuantity*salesPrice)*0.2);
//        volume = (volume + (FetechedQuantity*salesPrice));
//
//        System.out.println(Commission);
//        Commissionfield.setText(String.valueOf(Commission));
     // for(Order order: doctorOrganization.getOrderCatalog().getOrderCatalog()){
        for(OrderItem item : order.getOrderItemlist())
        {

            if(item.getDrug() == selectedProduct)
            {

                alreadyPresent = true;

                int oldAvail = selectedProduct.getQuantity();
                int newAvail = oldAvail - FetechedQuantity;
                selectedProduct.setQuantity(newAvail);
                item.setQuantity(FetechedQuantity + item.getQuantity());

                populateProductTable();
                populateCartTable();
                break;
            }
        }
      
        if (!alreadyPresent)
        {

            int oldAvail = selectedProduct.getQuantity();
            int newAvail = oldAvail-FetechedQuantity;
            selectedProduct.setQuantity(newAvail);
            order.addOrderItem( FetechedQuantity,salesPrice, selectedProduct);
            populateProductTable();
            populateCartTable();
        }
       
        
    }//GEN-LAST:event_addtoCartButton6ActionPerformed
public void populateCartTable()
        
    {
        DefaultTableModel model = (DefaultTableModel)orderTable.getModel();
        model.setRowCount(0);
        // for(Order order: doctorOrganization.getOrderCatalog().getOrderCatalog()){
        for(OrderItem item :order.getOrderItemlist())
        {Object [] row = new Object[4];
        row[0]=item;
         row[1]=item.getSalePrice();
          row[2]=item.getQuantity();
           row[3]=item.getSalePrice()*item.getQuantity();
           
           model.addRow(row);
        }
    
    
    }
    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
 //for(Order order: doctorOrganization.getOrderCatalog().getOrderCatalog()){
        if(order.getOrderItemlist().size() >0)
        {
            orderCatalog.addOrder(order);
            System.out.println(patient.getOrderCatalog());
            System.out.println(patient.getName());
//            custOrderCatalog.addOrder(order);
//            saleOrderCatalog.addOrder(order);

            JOptionPane.showMessageDialog(this,"Order Added successfully","warning",JOptionPane.INFORMATION_MESSAGE);
            order = new Order();
            populateProductTable();
            populateCartTable();

        }
 
        else
        {
            JOptionPane.showMessageDialog(this,"No order to checkout","warning",JOptionPane.INFORMATION_MESSAGE);

        }

//        salesPerson.setCommission(salesPerson.getCommission()+Commission);
//        salesPerson.setBelowTarget(salesPerson.getBelowTarget()+belowTarget);
//        salesPerson.setAboveTarget(salesPerson.getAboveTarget()+aboveTarget);
//
//        customer.setSalesVolume(volume + customer.getSalesVolume());
//        salesPerson.setSalesVolume(volume + salesPerson.getSalesVolume());

    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        if (order.getOrderItemlist().size() > 0)
        {for(OrderItem item : order.getOrderItemlist()){
            Drug p =item.getDrug();
            p.setQuantity(p.getQuantity()+item.getQuantity());
        }
        order.getOrderItemlist().removeAll(order.getOrderItemlist());
        }

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox suppComboBox1;
    private javax.swing.JTextField txtSalesPrice;
    // End of variables declaration//GEN-END:variables
}
