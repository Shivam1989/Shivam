/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorRole;

import Business.Enterprise.Enterprise;
import Business.Order.Order;
import Business.Order.OrderCatalog;
import Business.Order.OrderItem;
import Business.Patient.Patient;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.CardLayout;
import java.text.*;
import java.awt.print.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
//import javax.swing.text.Document;


/**
 *
 * @author shivam
 */
public class ViewOrderHistory extends javax.swing.JPanel {
JPanel userProcessContainer;
private Patient patient;
private Enterprise enterprise;
private OrderCatalog orderCatalog;
    /**
     * Creates new form ViewOrderHistory
     */
    public ViewOrderHistory(JPanel userProcessContainer,Enterprise enterprise,Patient patient) {
        initComponents();
         this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.patient=patient;
        orderCatalog=patient.getOrderCatalog();
        populateHistoryTable();
    }
    public void populateHistoryTable()
    
    {
    DefaultTableModel model = (DefaultTableModel)SupplierTable.getModel();
        
        model.setRowCount(0);
        for(Order order:orderCatalog.getOrderCatalog())
        {for(OrderItem item :order.getOrderItemlist())
        {Object[] row = new Object[3];
        row[0]=item;
        row[1]=item.getQuantity();
        row[2]= item.getSalePrice()*item.getQuantity();
        model.addRow(row);
        }
        }
    }
//public class Main { public static void main(String arg[])throws Exception {
//    Document document=new Document(); 
//    PdfWriter.getInstance(document,new FileOutputStream("hello.pdf")); 
//    document.open(); document.add(new Paragraph("Hello world this is my first PDF")); 
//    document.close(); }
//}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        SupplierTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        GenerateReport = new javax.swing.JButton();

        SupplierTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Medicine", "Qunatity", "Total Amount"
            }
        ));
        jScrollPane1.setViewportView(SupplierTable);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/DoctorRole/images.jpeg"))); // NOI18N

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        GenerateReport.setText("Print pdf");
        GenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(273, 273, 273)
                                .addComponent(GenerateReport))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(GenerateReport))
                .addGap(27, 27, 27))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void GenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateReportActionPerformed
        
try {
           // TODO add your handling code here:
           
           String DEST = "final.pdf";
           File file = new File(DEST);
           if (file.getParentFile() != null) {
  file.getParentFile().mkdirs();
}
  file.createNewFile();
          // file.getParentFile().mkdirs();
           createPdf(DEST);
       } catch (DocumentException ex) {
           Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
       } catch (FileNotFoundException ex) {
        Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }//GEN-LAST:event_GenerateReportActionPerformed

    
    public void createPdf(String dest) throws DocumentException, FileNotFoundException {
       Document document = new Document();
       PdfWriter writer = PdfWriter.getInstance((com.itextpdf.text.Document) document, new FileOutputStream(dest));
       document.open();
       
       PdfPTable pdfTable = new PdfPTable(SupplierTable.getColumnCount());
           //adding table headers
           for (int i = 0; i < SupplierTable.getColumnCount(); i++) {
               pdfTable.addCell(SupplierTable.getColumnName(i));
           }
           //extracting data from the JTable and inserting it to PdfPTable
           for (int rows = 0; rows <= (SupplierTable.getRowCount() - 1); rows++) {
               for (int cols = 0; cols < SupplierTable.getColumnCount(); cols++) {
                   pdfTable.addCell(SupplierTable.getModel().getValueAt(rows, cols).toString());

               }
           }
         pdfTable.addCell(new Phrase(" "));
         document.add(pdfTable);
//          
//          PdfPTable pdfTable1 = new PdfPTable(SupplierTable.getColumnCount());
//       
//           for (int i = 0; i < SupplierTable.getColumnCount(); i++) {
//               pdfTable1.addCell(SupplierTable.getColumnName(i));
//           }
//           //extracting data from the JTable and inserting it to PdfPTable
//           for (int rows = 0; rows <= (SupplierTable.getRowCount() - 1); rows++) {
//               for (int cols = 0; cols < SupplierTable.getColumnCount(); cols++) {
//                   pdfTable1.addCell(SupplierTable.getModel().getValueAt(rows, cols).toString());
//
//               }
//           }
//           
//           document.add(pdfTable1);

       document.close();
  
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GenerateReport;
    private javax.swing.JTable SupplierTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
